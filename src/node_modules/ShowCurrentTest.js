//ShowCurrentTest.js

import React from "react";

import ReactDOM from 'react-dom';

//import {Global} from "Global.js";

import {QuestionTest} from "QuestionTest.js";

import {AnswerTest} from "AnswerTest.js";

import {FooterQuestion} from "FooterQuestion.js";

import { useSelector } from 'react-redux';

import { useDispatch } from "react-redux";

//let global = Global();



export function ShowCurrentTest() {

    let count_questions_test = useSelector((store) => store.count_questions_test);
    let X_setInterval = useSelector((store) => store.X_setInterval);
    let countDownDate_qst = useSelector((store) => store.countDownDate_qst);
    let count_time_test = useSelector((store) => store.count_time_test);
    let countDownDate = useSelector((store) => store.countDownDate);
    let current_question = useSelector((store) => store.current_question);
    let selected_answer = useSelector((store) => store.selected_answer);
    let correct_answer = useSelector((store) => store.correct_answer);
    let tests = useSelector((store) => store.tests);
    let currentTest = useSelector((store) => store.currentTest);
    
    const dispatch = useDispatch();   

//  constructor(props) {
    let  arr_state_test = Array(count_questions_test);
    let  arr_state_green_red = Array(count_questions_test);
    let  arr_state_count_time_test = Array(count_questions_test).fill('00:00');
    let  arr_state_count_time_question = Array(count_questions_test).fill('00:00');
    for(let i=0; i<count_questions_test; i++) {
      arr_state_test[i] = true;
      arr_state_green_red[i] = [-1,-1]
    }
    arr_state_test[0] = false; 
//    super(props);
    this.handleChange = this.handleChange.bind(this);
/*    
    this.state = ({state_edit: false, 
                  state_test: arr_state_test,  // arr_state_test[i] = false - i-question is active
                  state_green_red: arr_state_green_red, // [[selected, corr],[selected, corr],... ]
                  state_count_time_test: arr_state_count_time_test, // time of all test for every question
                  state_count_time_question: arr_state_count_time_question // time  for every question
                })
*/

    dispatch({type: 'SET_TESTS', state_tests: arr_state_test, state_edit: false, 
      state_green_red: arr_state_green_red, state_count_time_test: arr_state_count_time_test,
      state_count_time_question: arr_state_count_time_question});


//  }// constructor

  // handleChange - choosing an answer for the question  
  function handleChange(evt){
    
//console.log('evt=',evt);    
//console.log('evt.par1=',evt.par1);  
//console.log('evt.i=',evt.i);  
    if(this.state.state_test[evt.par1] === false) {
//      let arr_state_test_new = Array(global.count_questions_test);
//      let arr_state_green_red_new = Array(global.count_questions_test);
      let arr_state_test_new = this.state.state_test.slice();
      let arr_state_green_red_new = this.state.state_green_red.slice();
      let li_number = evt.par2 - 1; //selected answer
      
      current_question = evt.par1;    // number of the current question

      selected_answer = li_number;
//console.log('handleChange:  li_number=',li_number, '  global.current_question=', global.current_question, '  global.currentTest=',global.currentTest);  
      let id_input = "id" + String(current_question*10 + li_number);
      correct_answer = Number(tests[currentTest][current_question].C_A) - 1; 
      arr_state_green_red_new[current_question] = [li_number, correct_answer];
//console.log('correct_answer=',correct_answer);    
  //console.log('Q=',global.tests[global.currentTest][current_question].Q);    
      let id_correct =  "id" + String(current_question*10 + correct_answer);//(correct_answer - 1));
//console.log('id_input=',id_input,'  id_correct=',id_correct);
      if(id_input === id_correct){
        global.count_correct_answer[current_question] = global.count_correct_answer[current_question] + 1; 	
      }
//console.log('global.count_correct_answer =',global.count_correct_answer) 
      for(let i=0; i<count_questions_test; i++) {arr_state_test_new[i] = true;} 
      for(let i=0; i<count_questions_test; i++){
        if(i === current_question){
          if(i !== count_questions_test-1){
            arr_state_test_new[i+1] = false;  
          } 
        }

      }
      current_question++; 
      let ID_work = 'ID'+ current_question + currentTest*100 + '_time_test';
      let ID_next = ('ID'+ (current_question + 1)) + currentTest*100 +  '_time_question';
//console.log('global.count_time_test[global.currentTest]=',global.count_time_test[global.currentTest]);    

      // sum of all test time 


      this.startWatch4(ID_next, ID_work); // start time for 0-th question
/*      
      this.setState({state_test: arr_state_test_new,
                    state_edit: !this.state_edit,
                    state_green_red: arr_state_green_red_new
      });
*/      
    }// if
  } //--- end handleChange        

  // startWatch4 -  timer of common time for the choosing question; insert in ID_TIME element
  //    ID_time_test - ID for question time
  function startWatch4(ID_TIME, ID_time_test) {  
//console.log('ID_TIME=',ID_TIME, '  global.currentTest=',global.currentTest); 
//console.log('ID_time_test=',ID_time_test, '  global.time_test=',global.time_test); 
//    if(ID_TIME.includes("00")) current_question = 0;
  // Update the count down every 1 second
 // console.log('444 current_question=',current_question); 
    let work;
//    let arr_state_count_time_test = [];
//    let arr_state_count_time_question = [];
//    for(let i = 0; i < global.count_questions_test; i++){
//      arr_state_count_time_test[i] = global.count_time_test[i];
//      arr_state_count_time_question[i] = global.count_time_question[i];
//    }
//console.log('555 current_question=',current_question);   
    clearInterval(X_setInterval);

    const time_work =  current_question;
//console.log('555--- time_work=',time_work);
//global.X_setInterval = setTimeout(function(time_work) {

    let time_work2 = time_work - 1;
    if(time_work === 0) count_time_test[time_work] =  '00:00'
    else   count_time_test[time_work] = count_time_test[time_work2];
//  console.log('000   global.count_time_test[time_work]=',global.count_time_test[time_work]);  

    X_setInterval = setInterval(function() {
//console.log('666 current_question=',current_question);       
//console.log('666--- time_work=',time_work);
  //console.log('444  time_test=',time_test); 
    // Get today's date and time
      let now = new Date().getTime();
  //console.log('1 now ==== ', now);	
    // Find the distance between now and the count down date
      let distance = now - countDownDate_qst;
  //console.log('1 distance ==== ', distance);	
    // Time calculations for days, hours, minutes and seconds
      let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
      let seconds = Math.floor((distance % (1000 * 60)) / 1000);
  
    // Display the result in the element with id="demo"
  //  document.getElementById(ID_TIME).innerHTML = days + "d " + hours + "h "
  //  + minutes + "m " + seconds + "s ";
  //console.log('1 ID_TIME ==== ', ID_TIME,  '   minutes = ' + minutes, '   seconds = ' + seconds);	
      work = document.getElementById(ID_TIME);
      if (minutes < 10) {
        minutes = '0' + minutes;
      }
      if (seconds < 10) {
        seconds = '0' + seconds;
      }
      count_time_question[time_work] = minutes + ":" + seconds;
      let work_count_time_question = minutes + ":" + seconds;
//console.log('0000  time_workn=',time_work,'   global.count_time_question[current_question]=', global.count_time_question[time_work])      
//console.log('minutes = '+minutes, 'seconds = '+seconds);      
  //console.log('count_time_question = '+count_time_question);  
  
      if(work !== null) {
        work.innerHTML = work_count_time_question;  //global.count_time_question[time_work]; 
      }
  
    // If the count down is finished, write some text
      if (distance < 0) {
        clearInterval(X_setInterval);
        if(document.getElementById(ID_TIME) !== null) {
          document.getElementById(ID_TIME).innerHTML = "EXPIRED";
        } 
      }
  
      work = document.getElementById(ID_time_test);
    
//console.log('444  time_test=',time_test);
//console.log('global.count_time_question[time_work]=',global.count_time_question[time_work]); 

//      if(time_work === 0) global.count_time_test[time_work] = '00:00';
      count_time_test[time_work] = sumMinSec(count_time_test[time_work],'00:01');
//      let work2 = sumTestTime();
//console.log('global.count_time_test[time_work]=',global.count_time_test[time_work]);      
//      arr_state_count_time_test[time_work] = global.count_time_test[time_work];
//      arr_state_count_time_question[time_work] = global.count_time_question[time_work]; 

//console.log('arr_state_count_time_test[time_work]=',arr_state_count_time_test[time_work]);   
//console.log('arr_state_count_time_question[time_work]=',arr_state_count_time_question[time_work]);      
  
      if(work !== null) {
        work.innerHTML = count_time_test[time_work];  //global.count_time_test[current_question];
      }
  
// console.log('777 current_question=',current_question); 
    }, 1000);
//  });   
//  clearInterval(global.X_setInterval);

//console.log('888 current_question=',current_question); 

    // summ minutes and seconds of all test; return -  minutes:seconds
    function sumMinSec(count_time_test_work, count_time_quest) {
      let pos=-1, minutes=0, seconds=0;
//console.log('1 count_time_test_work=',count_time_test_work,'  count_time_quest=',count_time_quest);

      pos = count_time_quest.indexOf(':');
      if (pos > 0) {
        minutes = Number(count_time_quest.slice(0, pos));
        seconds = Number(count_time_quest.slice(pos+1));
      } else {
        minutes = 0;
        seconds = 0;
      }
    //console.log('2 count_time_test_work=',count_time_test_work,'  count_time_quest=',count_time_quest) 
   
      pos = count_time_test_work.indexOf(':');
      if (pos > 0) {
        minutes += Number(count_time_test_work.slice(0, pos));
        seconds += Number(count_time_test_work.slice(pos+1));
      } 
    
      if (seconds >= 60) {
        minutes += Math.floor(seconds / 60);
        seconds = seconds - (Math.floor(seconds / 60) * 60);
      }

      if (minutes < 10) {
        minutes = '0' + minutes;
      }

      if (seconds < 10) {
        seconds = '0' + seconds;
      }
//console.log('minutes=',minutes,'  seconds=',seconds)
      return minutes + ':' + seconds;
      
    } //--- end of sumMinSec

  }//---end of startWatch4
   
//  render(){
//console.log('render');    
    let j = 0;
    let si;
    let ID_time; // ID for time_test
    let ID_time_qst; // ID for time_tests_qst
    let ID_work;

    if(document.getElementById('words_wrapper') !== null) document.getElementById('words_wrapper').style.display = 'none';
    if(document.getElementById('listen_wrapper') !== null) document.getElementById('listen_wrapper').style.display = 'none';
    if(document.getElementById('phrases_wrapper') !== null) document.getElementById('phrases_wrapper').style.display = 'none';
    if(document.getElementById('jokes_wrapper') !== null) document.getElementById('jokes_wrapper').style.display = 'none';
    document.getElementById('header_menu_words').style.textDecoration = 'none';
    document.getElementById('header_menu_listen').style.textDecoration = 'none';
    document.getElementById('header_menu_phrases').style.textDecoration = 'none';
    document.getElementById('header_menu_jokes').style.textDecoration = 'none';

    document.getElementById('tests_wrapper').style.display = 'block';

    // show  TESTS
    countDownDate = new Date().getTime(); // start time for the chosing test
    countDownDate_qst = new Date().getTime(); // start time for the chosing question

    let element = [];
//console.log('this.state.state_edit=',this.state.state_edit);

    for(let ii=0; ii < count_questions_test; ii++) { // show all questions for the test
//console.log('33333 this.props.arr_state_green_red[this.props.numberQuestion]=',this.state.state_green_red);            
      // add <div class="question_cont">
      ID_work = 'ID'+ ii + currentTest*100 +  '_question_cont';  
//console.log('ID_work=',ID_work);      
      if (this.state.state_test[ii]) {
        // hide all questions except 0
        element[ii] = (
        <div key={ID_work} id={ID_work} className="question_cont" style={{opacity: ".5"}}>
          <QuestionTest numberQuestion={ii} />
          <AnswerTest numberQuestion={ii} arr_state_green_red_props={this.state.state_green_red} func={this.handleChange} />
          <FooterQuestion numberQuestion={ii} />
        </div>
        )
      } else  element[ii] = (
      <div  key={ID_work} id={ID_work} className="question_cont">
        <QuestionTest numberQuestion={ii} />
        <AnswerTest numberQuestion={ii} arr_state_green_red_props={this.state.state_green_red} func={this.handleChange} />
        <FooterQuestion numberQuestion={ii} />
      </div> 
      )
    }  // for

 
    countDownDate_qst = new Date().getTime(); // start time for the chosing question

    ID_time = 'ID'+ current_question + currentTest*100 + '_time_question';
    ID_time_qst = 'ID'+ current_question + currentTest*100 + '_time_test';
//console.log('222=========== current_question=',current_question);  
//console.log('ID_time, global.currentTest, ID_time_qst, global.count_time_test =',ID_time, global.currentTest, ID_time_qst, global.count_time_test[global.currentTest])

    this.startWatch4(ID_time, ID_time_qst); // start time for 0-th question     

    dispatch({type: 'SET_TESTS', X_setInterval: X_setInterval, countDownDate_qst: countDownDate_qst, 
      count_time_test: count_time_test, countDownDate: countDownDate, current_question: current_question,
      selected_answer: selected_answer});

//console.log('333 current_question=',current_question); 
    return element;
//  }    
} //--- end of ShowCurrentTest