//ListTestsWrapper.js-----------------------------------
//Show the Test List: numberTest

import React from "react"
import ReactDOM from 'react-dom';

//import {Global} from "Global.js";

import {ShowCurrentTest} from "ShowCurrentTest.js";

import { useSelector } from 'react-redux';

import { useDispatch } from "react-redux";

import { insertAfter } from "insertAfter.js";

import { getPosDiv } from "getPosDiv.js";


//const dispatch = useDispatch();   

//import {ShowTest} from "ShowTest.js";

//let global = Global();

//Tests Menu 
//export function ListTestsWrapper(props) {


export function ListTestsWrapper(props) {
    console.log('ListTestsWrapper-------------------')

//  constructor(props) {
//

    let count_questions_test = useSelector((store) => store.count_questions_test);

    console.log('ListTestsWrapper:  count_questions_test=',count_questions_test);

    const dispatch = useDispatch();   

    //dispatch({type: 'SET_TESTS', setStateTests: "full", stateEdit: false});

    console.log('ListTestsWrapper:  count_questions_test=',count_questions_test);



    let  arr_state_test = Array(count_questions_test);
    for(let i=0; i<count_questions_test; i++) {arr_state_test[i] = true;}
    arr_state_test[0] = false;
   
    
    
//    super(props);
//    this.handleChange = this.handleChange.bind(this);

//    this.state = (
//      {state_test: arr_state_test,
//       state_edit: false
//      }
//    ); //arr_state_test

    
    
//  }

    
    let tests = useSelector((store) => store.tests);


    function showTest(numberTest){
    
        let count_correct_answer = Array(count_questions_test).fill(0);  // count of correct answers for every question
        
        let count_time_question = Array(count_questions_test).fill('00:00');  // all time for the current question

        let count_time_test = Array(global.count_questions_test).fill('00:00'); // all time for the current test

        let selected_answer = -1;  // number of the selected answer in the current question

        let correct_answer = -1;  // number of the correct answer in the current question  
        
        let current_question = 0;  // number of current question ( 0  -  first)

    //    console.log('showTest:  global.count_time_test=',global.count_time_test);    
    //console.log('numberTest=',numberTest);
        if(!((document.getElementById('header_menu_tests') === 'underfined') || (document.getElementById('header_menu_tests') === null)))
            document.getElementById('header_menu_tests').style.textDecoration = "underline";

        if(!((document.getElementById('words_wrapper') === 'underfined') || (document.getElementById('words_wrapper') === null)))
            document.getElementById('words_wrapper').style = {visibility: 'hide'};

    //console.log('numberTest=',numberTest);
        let currentTest = numberTest; // current test

        dispatch({type: 'SET_TESTS', state_tests: arr_state_test, state_edit: false, count_questions_test: count_questions_test,
            count_time_question: count_time_question, count_time_test: count_time_test, selected_answer: selected_answer,
            correct_answer: correct_answer, current_question: current_question, count_correct_answer: count_correct_answer,
            currentTest: currentTest});


        function ShowTestWork(){
            return <ShowCurrentTest />;
        }//---end of ShowTestWork
    
    //    ReactDOM.render(<ShowTestWork />, document.getElementById('tests_wrapper'));

    } //----end of  showTest(numberTest) {

    function noVisibilityTests(e) {
        if(!((document.getElementById('list_tests_wrapper') === 'underfined') || (document.getElementById('list_tests_wrapper') === null))){
            document.getElementById('list_tests_wrapper').style.visibility = 'hidden';
            dispatch({type: 'SET_TESTS', list_tests_wrapper: 'hidden'});
        }
        
    //    e.target.style.background = 'red';
    }//----end of  noVisibilityTests

//  render() {
//console.log('111 render this.state.state_test=',this.state.state_test);    
//console.log('111 render global.count_questions_test=',global.count_questions_test) 
//console.log('111 render global.currentTest=',global.currentTest)

//    if(this.state.state_edit){
//      this.showTest(global.currentTest);
//    }
    
    let work1, arr=[];
    
    let k;     
    for(let i = 1; i <= tests.length; i++){
      work1 = "TEST" + i;
      k = i - 1;
//      arr[i] = <div key={work1} id={work1} className="menu_test" fontSize="11px" onClick={this.showTest.bind(this,k)}>{work1}</div>
      arr[i] = <div key={work1} id={work1} className="menu_test" fontSize="11px" onClick={showTest(this,k)}>{work1}</div>
    }
    
//    HeaderBgrTestLondon();
/*
    let div_tests_wrapper = document.createElement('div');
    div_tests_wrapper.value = arr;
    div_tests_wrapper.setAttribute("id", "list_tests_wrapper");
    div_tests_wrapper.setAttribute("onMouseLeave", { noVisibilityTests });
    let div_tests_wrapper_work = document.getElementById("header_menu_tests_cont_id");

    console.log('ListTestsWrapper: div_tests_wrapper_work=', div_tests_wrapper_work);
    console.log('ListTestsWrapper: div_tests_wrapper=', div_tests_wrapper);
                
//    insertAfter(div_tests_wrapper, div_tests_wrapper_work);
*/
    const obj = document.getElementById("list_tests_wrapper");
    console.log('ListTestsWrapper: obj=', obj);

//    const rect = getPosDiv(obj);

//    console.log('ListTestsWrapper: rect=', rect);

//    return (<div id="list_tests_wrapper" onMouseLeave={ noVisibilityTests }> {arr} </div>)
    
//  }

return null;

}//----end of  ListTestsWrapper 
//export default ListTestsWrapper;

/*

*/