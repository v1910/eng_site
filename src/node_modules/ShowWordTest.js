import React from "react";

import ReactDOM from 'react-dom';

import {Global} from "Global.js";

let global = Global();

//export function ShowWordTest(dict_word) {

export class ShowWordTest extends React.Component {  
	constructor(props) {
		super(props);

    let wrapper = document.getElementById("words_wrapper");
    let work_state_button_next_word_value = "\u25bc&nbsp;&nbsp; Next Word" + "&nbsp;&nbsp;" + 1 +'/'+global.nWords;
    global.words = global.all_words[global.current_number_word_group];
    global.nWords = global.words.length;
    global.work_arr = this.wordsRandom(); // array with random indexes
//console.log('global.curent_number_word=',global.curent_number_word)    
//console.log('global.work_arr[global.curent_number_word]=',global.work_arr[global.curent_number_word])            
//console.log('global.words[global.work_arr[global.curent_number_word]]=',global.words[global.work_arr[global.curent_number_word]])     

		this.state = (
      {state_button_next_descr_color: 'white',
       state_label_next_descr_value: global.words[global.work_arr[global.curent_number_word]].D[global.count_pick_button_show_word],
       state_input_word_value: '',       
       state_label_yes_no_word_value: '',
       state_label_yes_no_word_style: {color:  'green', visibility: 'hidden'},
       state_label_answer_value: '',
       state_label_answer_visibility: 'hide',
		   state_button_show_words_color: 'white',
       state_label_show_words_value: '',
       state_label_show_words_visibility: 'hide',
       state_label_show_transcription_visibility: 'hide',
       state_label_show_transcription_value: '',
       state_button_next_word_value: 'Next Word ' + (global.curent_number_word+1) +'/'+global.nWords
		  }
    ); 
    this.showDescr = this.showDescr.bind(this);
    this.inputWord = this.inputWord.bind(this);
    this.showAnswer = this.showAnswer.bind(this);
    this.showWord2 = this.showWord2.bind(this);
    this.showTranscription = this.showTranscription.bind(this);        
    this.nextWord = this.nextWord.bind(this);  
    
	}//	constructor


  render() {
    let style_state_button_next_descr_color = {color: this.state.state_button_next_descr_color};
    let work_state_input_word_value = this.state.state_input_word_value;
    let style_state_label_yes_no_word_style = {color: this.state.state_label_yes_no_word_style.color, visibility: this.state.state_label_yes_no_word_style.visibility};
    let style_state_label_answer_visibility = {visibility: this.state.state_label_answer_visibility};
    let style_state_button_show_words_color = {color: this.state.state_button_show_words_color};
    let style_state_label_show_words_visibility = {visibility: this.state.state_label_show_words_visibility};
    let style_state_label_show_transcription_visibility = {visibility: this.state.state_label_show_transcription_visibility};
    let work_state_button_next_word_value = this.state.state_button_next_word_value;

    document.getElementById('tests_wrapper').style.display = 'none';
    document.getElementById('listen_wrapper').style.display = 'none';
    document.getElementById('phrases_wrapper').style.display = 'none';
    document.getElementById('jokes_wrapper').style.display = 'none';
    document.getElementById('header_menu_tests').style.textDecoration = 'none';
    document.getElementById('header_menu_listen').style.textDecoration = 'none';
    document.getElementById('header_menu_phrases').style.textDecoration = 'none';
    document.getElementById('header_menu_jokes').style.textDecoration = 'none';
    
//console.log('style_state_label_answer_visibility=',style_state_label_answer_visibility)
    document.getElementById('words_wrapper').style.display = 'block';
    document.getElementById('header_menu_words').style.textDecoration = 'underline';

      let show_Word = (
      <div className='body_words'>
        <div id="words">

          <div id="descr">		
            <button id="button_show_descr" style={style_state_button_next_descr_color} onClick={this.showDescr}>Next Description</button>
            <label id="label_descr">{this.state.state_label_next_descr_value}</label>
          </div>				

          <div id="input_word">
            <input id="input_input_word" placeholder="Type the root word here"  type="text" />
            <button id="button_input_word" onClick={this.inputWord}>Check</button>
            <label id="label_yes_no_word" style={style_state_label_yes_no_word_style}>{this.state.state_label_yes_no_word_value}</label>
          </div>	
          
          <div id="answer">		
            <button id="button_show_answer"  style={style_state_label_answer_visibility}  onClick={this.showAnswer}>Show Answer</button>
            <label id="label_answer">{this.state.state_label_answer_value}</label>
          </div>	
        
          <button id="button_show_words" style={style_state_button_show_words_color} onClick={this.showWord2}>Show Word</button>
          <label id="label_words"  style={style_state_label_show_words_visibility}>{this.state.state_label_show_words_value}</label>
          
          <button id="button_show_transcription"  onClick={this.showTranscription}>Show Transcription</button>
          <label id="label_transcription" style={style_state_label_show_transcription_visibility}>{this.state.state_label_show_transcription_value}</label>					
          
        </div>

      <button id="button_next_word"  onClick={this.nextWord}>{work_state_button_next_word_value}</button>
        
      </div>
      );     

//console.log('before return')
      return show_Word;
  }//---end of  render
    

  // wordsRendom - it does random list of words
  wordsRandom () {
    let work_arr1 = [], work_arr2 = [];
    let nRandom;
    let topArr;
    let flag = true;

    topArr = global.nWords - 1;

    // init work_arr1, work_arr2
    for(let i=0; i < global.nWords; i++) {
      work_arr1[i] = i;
      work_arr2[i] = -1;
    }
    
    // random changing of words
    for(let i=0; i < global.nWords; i++) {
      flag = true;
      nRandom = this.getRandomInt(0, topArr);
      if(work_arr2[nRandom] === -1) {
        work_arr2[nRandom] = i
        flag = false;
      }
      else {
        if(nRandom > 0) {
          for(let j=0; j<nRandom; j++) {
            if(work_arr2[nRandom-j-1] === -1) {
              work_arr2[nRandom-j-1] = i;
              flag = false;
              break;
            }					
          }
          if(flag && (nRandom < topArr))
          for(let j=nRandom+1; j<global.nWords; j++) {
            if(work_arr2[j] === -1) {
              work_arr2[j] = i;
              flag = false;
              break;
            }					
          }
          if((nRandom === topArr) && (work_arr2[nRandom] === -1)) work_arr2[nRandom] = i;			
        }
        else  // nRandom = 0
        for(let j=1; j<global.nWords; j++) {
          if(work_arr2[j] === -1) {
              work_arr2[j] = i;
              flag = false;						
              break;
          }					
        }
      }
      if(flag) console.log("system error:", "  i= ", i, "  nRandom= ", nRandom);
  //		console.log('i= ',i, '   nRandom= ',nRandom);
    }
    return work_arr2;
  }//--- end of wordsRandom



  // showDescr - show next word description
  showDescr() {
      let style_state_button_next_descr_color = {color:  this.state.state_button_next_descr_color};
      let work_state_label_next_descr_value = this.state.state_label_next_descr_value;

//  console.log('showDescr  buttonDescr=',buttonDescr)  
 
      let ind = global.words[global.work_arr[global.curent_number_word]].D.length;
//console.log('ind =',ind);	
//console.log('1 global.count_pick_button_show_description =',global.count_pick_button_show_description);	
   
      if(ind > 1) {
        global.count_pick_button_show_description++;
        if(global.count_pick_button_show_description < ind) {
          if(global.count_pick_button_show_description === ind-1){
            style_state_button_next_descr_color  = "red";
          }
          else {
            style_state_button_next_descr_color  = "white";
          }
        }
        else  {
          global.count_pick_button_show_description = 0;
          style_state_button_next_descr_color  = "white";
        }
        work_state_label_next_descr_value = global.words[global.work_arr[global.curent_number_word]].D[global.count_pick_button_show_description];    
      }
      else { // there is only one description
        work_state_label_next_descr_value = global.words[global.work_arr[global.curent_number_word]].D[0];
      }
   
      if (document.getElementById("input_input_word") !== null) {
        document.getElementById("input_input_word").focus();
      }

      this.setState({
        state_button_next_descr_color: style_state_button_next_descr_color,
        state_label_next_descr_value: work_state_label_next_descr_value
      });

  }//---end of showDescr


  // inputWord - input the root word
  inputWord() {
    let input_word = document.getElementById("input_input_word"); //inputWord
    let work_state_label_yes_no_word_value =  this.state.state_label_yes_no_word_value;
    let style_state_label_yes_no_word_style = this.state.state_label_yes_no_word_style;
//       state_label_yes_no_word_style: {color:  'green', visibility: 'hidden'},    
  //console.log('global.work_arr[global.curent_number_word]=',global.work_arr[global.curent_number_word])  
  //console.log('global.words[global.work_arr[global.curent_number_word]]=',global.words[global.work_arr[global.curent_number_word]])  
  //console.log('global.work_arr=',global.work_arr)
    let current_word = global.words[global.work_arr[global.curent_number_word]].W[0];
//console.log('current_word=',current_word)  
//console.log('input_word.value=',input_word.value)
//console.log('style_state_label_yes_no_word_style=',style_state_label_yes_no_word_style)
    if(input_word){//&& input_word.isConfirmed){
      if(input_word.value === this.currentWordClean(current_word)) { 
        work_state_label_yes_no_word_value = 'Correct'; //'\u2705';
        style_state_label_yes_no_word_style = {color: 'green', visibility: 'visible'};
      }
      else {
        work_state_label_yes_no_word_value = "Wrong";
        style_state_label_yes_no_word_style = {color: "red", visibility: "visible"};
//        style_state_label_yes_no_word_style.color = "red";
      }
//      style_state_label_yes_no_word_style.visibility = "visible";
    }

    this.setState({
      state_label_yes_no_word_value: work_state_label_yes_no_word_value,
      state_label_yes_no_word_style: style_state_label_yes_no_word_style
    });
//console.log('state_label_yes_no_word_value=',this.state.state_label_yes_no_word_value)
//console.log('state_label_yes_no_word_style=',this.state.state_label_yes_no_word_style)
  }//---end of input_word


  // showAnswer - show current answer
  showAnswer() {
      let work_state_label_answer_value = this.state.state_label_answer_value;
      let style_state_label_answer_visibility = this.state.state_label_answer_visibility;
      let ind = global.words[global.work_arr[global.curent_number_word]].A.length;

      if(ind !== global.words[global.work_arr[global.curent_number_word]].D.length) 
        console.log('system error in the word: ' + global.words[global.work_arr[global.curent_number_word]].W[0]);

      if(global.count_pick_button_show_description >= 0)
        work_state_label_answer_value  = global.words[global.work_arr[global.curent_number_word]].A[global.count_pick_button_show_description]
      else work_state_label_answer_value  = global.words[global.work_arr[global.curent_number_word]].A[0];
      style_state_label_answer_visibility = "visible";

      this.setState({
        state_label_answer_value: work_state_label_answer_value,
        state_label_answer_visibility: style_state_label_answer_visibility
      });

  }//---end of showAnswer

  
    // showWord2 - show next word
    showWord2() {	
      let style_state_button_show_words_color = {color: this.state.state_button_show_words_color};
      let work_state_label_show_words_value = this.state.state_label_show_words_value;
      let style_state_label_show_words_visibility = {visibility: this.state.state_label_show_words_visibility};
      //console.log('1 curent_number_word=',curent_number_word);
//      let buttonWord = document.getElementById("button_show_words");
      let ind = global.words[global.work_arr[global.curent_number_word]].W.length;
//      let labelWord = document.getElementById("label_words");

        style_state_button_show_words_color = "white";
        if(ind === 1) style_state_button_show_words_color = "red";
          if(global.count_pick_button_show_word < ind) {
            if((global.count_pick_button_show_word === ind-1) || (ind === 1)){
              style_state_button_show_words_color = "red";
            }
            work_state_label_show_words_value  = global.words[global.work_arr[global.curent_number_word]].W[global.count_pick_button_show_word];
          }
          else {
            global.count_pick_button_show_word = 0;
            work_state_label_show_words_value  = global.words[global.work_arr[global.curent_number_word]].W[global.count_pick_button_show_word];
          }
          global.count_pick_button_show_word++;
          style_state_label_show_words_visibility = "visible";

      this.setState({
        state_label_show_words_value: work_state_label_show_words_value,
        state_button_show_words_color: style_state_button_show_words_color,
        state_label_show_words_visibility: style_state_label_show_words_visibility
      });

    }//---end of showWord2

    
    // showTranscription - show transcription
    showTranscription() {
      let style_state_label_show_transcription_visibility = {visibility: this.state.state_label_show_transcription_visibility};
      let work_state_label_show_transcription_value = this.state.state_label_show_transcription_value;
//      let buttonTranscription = document.getElementById("button_show_transcription");
//      let labelTranscription = document.getElementById("label_transcription");

      work_state_label_show_transcription_value  = global.words[global.work_arr[global.curent_number_word]].T;
      style_state_label_show_transcription_visibility = {visibility: "visible"};

      this.setState({
        state_label_show_transcription_value: work_state_label_show_transcription_value,
        state_label_show_transcription_visibility: style_state_label_show_transcription_visibility
      });

//        buttonTranscription.style.color = "red";
    }//---end of showTranscription


  // nextWord - go to next word
  nextWord() {
    let style_state_button_next_descr_color = {color: this.state.state_button_next_descr_color};
    let style_state_label_yes_no_word_style = {color: this.state.state_label_yes_no_word_style.color, visibility: this.state.state_label_yes_no_word_style.visibility};
    let style_state_label_answer_visibility = {visibility: this.state.state_label_answer_visibility};
    let style_state_button_show_words_color = {color: this.state.state_button_show_words_color};
    let style_state_label_show_words_visibility = {visibility: this.state.state_label_show_words_visibility};
    let style_state_label_show_transcription_visibility = {visibility: this.state.state_label_show_transcription_visibility};
    let work_state_label_next_descr_value;
    let work_state_input_word_value = '';
    let work_state_label_show_words_value = '';
    let work_state_label_show_transcription_value = '';
    let work_state_button_next_word_value = '';
    let work_state_label_yes_no_word_value = '';
    let work_state_label_answer_value = '';
   
    global.curent_number_word++;
//console.log('global.curent_number_word=',global.curent_number_word)    
    if(global.curent_number_word >= global.nWords) {
      global.curent_number_word = 0;
      global.work_arr = this.wordsRandom(); // array with random indexes
    }

    style_state_button_next_descr_color = {color: 'white'};
    style_state_label_yes_no_word_style = {color: 'green', visibility: 'hide'};
    style_state_label_answer_visibility = {visibility: 'hide'};
    style_state_button_show_words_color = {color: 'white'};
    style_state_label_show_words_visibility = {visibility: 'hide'};
    style_state_label_show_transcription_visibility = {visibility: 'hide'};

//console.log('nextWord 2 curent_number_word=',curent_number_word);	
    global.count_pick_button_show_word = 0;
    global.count_pick_button_show_description = 0;
    global.count_pick_button_show_answer = 0;  

    work_state_label_next_descr_value = global.words[global.work_arr[global.curent_number_word]].D[global.count_pick_button_show_word];
    let np1 = global.curent_number_word + 1;
//console.log('work_state_label_next_descr_value=',work_state_label_next_descr_value)        
    work_state_button_next_word_value = "Next Word " + np1 +'/'+global.nWords;
    document.getElementById('input_input_word').value = "";
    document.getElementById('button_show_descr').style = "color: white";
    document.getElementById('button_show_words').style = "color: white";

    this.setState({
      state_button_next_descr_color: style_state_button_next_descr_color,
      state_label_next_descr_value: work_state_label_next_descr_value,
      state_input_word_value: work_state_input_word_value,       
      state_label_yes_no_word_value: work_state_label_yes_no_word_value,
      state_label_yes_no_word_style: style_state_label_yes_no_word_style,
      state_label_answer_value: work_state_label_answer_value,
      state_label_answer_visibility: style_state_label_answer_visibility,
      state_button_show_words_color: style_state_button_show_words_color,
      state_label_show_words_value: work_state_label_show_words_value,
      state_label_show_words_visibility: style_state_label_show_words_visibility,    
      state_state_label_show_transcription_visibility: style_state_label_show_transcription_visibility,
      state_label_show_transcription_value: work_state_label_show_transcription_value,
      state_button_next_word_value: work_state_button_next_word_value
    });

  }//---end of nextWord



// Returns a random integer between min (inclusive) and max (inclusive).
// The value is no lower than min (or the next integer greater than min
// if min isn't an integer) and no greater than max (or the next integer
// lower than max if max isn't an integer).
// Using Math.round() will give you a non-uniform distribution!
//
  getRandomInt(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }//---end of getRandomInt

  // currentWordClean - read the current word without (v), (a), (n), (c)
  currentWordClean(c_word) {
    let work = c_word.slice(0, c_word.length - 3);
    work = work.trim();
    return work;
  }//---end of current_word_clean


}//---end of ShowWordTest

