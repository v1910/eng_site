
// addTestMenu - create a new a-element in the tests list
function addTestMenu (testN) {
	let para = document.createElement("div");
	let name_id = "test"+testN;
	let node = document.createTextNode("TEST" + testN);
	para.setAttribute("id", name_id);
	para.setAttribute("class", "menu_test");
	para.setAttribute("font-size", "11px");
	para.setAttribute("onclick", "showTest("+testN+")");
	para.appendChild(node);
	let element = document.getElementById("list_tests_wrapper");
	element.appendChild(para);

  if (X_setInterval !== 0) clearInterval(X_setInterval);
	
}

// addWordMenu - create a new element in the words list with name `words_name`
function addWordMenu (words_name) {
//console.log('addWordMenu=', words_name);	
	let para = document.createElement("div");
	let name_id = words_name;
	let node = document.createTextNode(words_name);
	para.setAttribute("id", name_id);
	para.setAttribute("class", "menu_word");
	para.setAttribute("font-size", "11px");
	para.setAttribute("onclick", 'showWordTest(' + '"' + words_name + '"' +')');
	para.appendChild(node);
	let element = document.getElementById("list_words_wrapper");
	element.appendChild(para);
}


// Defenition of selected TEST
function defSelTest (number_test) {
	
	let aElem = document.getElementById("a_work");
	let selectElem = document.getElementById("list_tests");
//	selectElem.addEventListener('change', function() {
//	index = selectElem.selectedIndex;
//    aElem.text = index;
//	console.log('showTest2=',aElem.text);
//})
//console.log('number_test=',number_test);
$( "#test1" ).click(function() {
  alert( "Handler for .click() called." );
});
	
}

// showTest - Test with number nTest
function showTest(numberTest) {
//	let question_test = document.getElementById("question_test");
//	let node = document.createElement("p");                 // Create a <a> node
//	let textnode = document.createTextNode("TEST"+numberTest);         // Create p text node
//	node.setAttribute('class', 'p_tests');
//	let func = 'showTest(' + testN + ')'
//	node.setAttribute('href', "#");
//	node.setAttribute('onclick', func);
//	node.appendChild(textnode);                              // Append the text to <p>
//	document.getElementById("dropdown-p").appendChild(node);     // Append <p> to dropdown-a	

//console.log('numberTest=',numberTest);
  document.getElementById("test_wrapper").innerHTML = ""; // clean tests
  document.getElementById("wrapper").innerHTML = ""; // clean words
  document.getElementById("jokes_wrapper").innerHTML = ""; // clean jokes
let jokes_wrapper = document.getElementById("jokes_wrapper");
	// not show  WORDS
	let wrapper = document.getElementById("wrapper");
	wrapper.style.display = "none";
	
	// show  TESTS
	let test_wrapper = document.getElementById("test_wrapper");
	test_wrapper.style.display = "block";
	
	countDownDate = new Date().getTime(); // start time for the chosing test
	countDownDate_qst = new Date().getTime(); // start time for the chosing question
	count_correct_answer = 0;  // count of correct answers
	
	let questions_test = tests[numberTest-1];
	count_questions_test = questions_test.length;
	let tests_wrapper = document.getElementById("test_wrapper");
	let func = '';
	let j = 0;
	let si;
	let ID_time; // ID for time_test
	let ID_time_qst; // ID for time_tests_qst
  let ID_work;
	
	//remove content of class `question_cont`
	$(".question_cont").remove();
	
	for(let ii=0; ii < count_questions_test; ii++) { // show all questions for the test
		// add new question in id=tests_wrapper
		
		// add <div class="question_cont">
		let question = questions_test[ii];
		let node = document.createElement("div"); 
		node.setAttribute('class', "question_cont");
		ID_work = 'ID'+ ii + numberTest*100 +  '_question_cont';
    node.setAttribute("id", ID_work);
    if (ii !== 0) {
      node.setAttribute("style", "opacity: .3;"); // hide all questions except 0
    }
  	tests_wrapper.appendChild(node);     // Append <div> to tests_wrapper
    
    // add style: -webkit-user-select
//console.log('ID_work=',ID_work)    
  
//console.log('_question_cont=',question_cont.style)

		// add <div class="question_test">
		let question_cont = $("#test_wrapper").children(".question_cont")[ii]; 
		node = document.createElement("div");		
		node.innerHTML  =  questions_test[ii].Q;
		node.setAttribute('class', "question_test");
		ID_work = 'ID'+ ii + numberTest*100 +  '_question_test';
		node.setAttribute("id", ID_work);		
		question_cont.appendChild(node);     // Append <div> to question_cont
		
		// add <ui class="answer_test"> 
		let work = $("#test_wrapper").children(".question_cont");
		question_cont = work[ii]; 
		node = document.createElement("ul");
		node.setAttribute('class', "answer_test");		
		let arr_val = Object.values(question);
		for(let i=3; i < arr_val.length; i++){
			j = i - 3;
			func = 'li_answer(' + j + ',' + ii + ',' + numberTest + ')';
			node.innerHTML  += '<li id="id' + (ii*10 + j) + '" '  + 'class="li_class" onclick="' + func + '">' + arr_val[i] + '</li>';
		}	
		question_cont.appendChild(node);     // Append <ui> to question_cont	

		// add <div class="footer_question">
		question_cont = $("#test_wrapper").children(".question_cont")[ii]; 
		node = document.createElement("div");		
		node.setAttribute('class', "footer_question");	
		ID_work = 'ID'+ ii + numberTest*100 +  '_footer_question';
		node.setAttribute("id", ID_work);
		question_cont.appendChild(node);     // Append <div> to question_cont

		// add <button class="button_test">  WHY
		question_cont = $("#test_wrapper").children(".question_cont")[ii].lastElementChild;
		node = document.createElement("button");		
		node.setAttribute('class', "button_test");
		ID_work = 'ID'+ ii + numberTest*100 +  '_button_test';
    node.setAttribute("id", ID_work);
		node.innerHTML  = 'WHY'; 		
		question_cont.appendChild(node);     // Append <div> to question_cont

		// add <div class="number_question">
		question_cont = $("#test_wrapper").children(".question_cont")[ii].lastElementChild;
		node = document.createElement("div");		
		node.setAttribute('class', "number_question");
		ID_work = 'ID'+ ii + numberTest*100 +  '_number_question';
		node.setAttribute("id", ID_work);		
		node.innerHTML  = ii+1 + '/' + count_questions_test;
		if(ii < 9)  node.style.width = '26px'
		else node.style.width = '35px';
		question_cont.appendChild(node);     // Append <div> to question_cont


		// add <div class="correct_answers">
		question_cont = $("#test_wrapper").children(".question_cont")[ii].lastElementChild;
		node = document.createElement("div");		
		node.setAttribute('class', "correct_answers");
		ID_work = 'ID'+ ii + numberTest*100 +  '_correct_answers';
		node.setAttribute("id", ID_work);
		si = ii.toString();
		if(count_correct_answer >= 0) {
			switch (si.length) {
				case 1:
					node.innerHTML  =  '/' + count_correct_answer; 		
					break;
				case 2:
					node.innerHTML  = '/\u00A0' + count_correct_answer; 		
					break;
				case 3:
					node.innerHTML  = '/\u00A0' + count_correct_answer; 		
					break;				
				default:
					node.innerHTML  = '/\u00A0' + count_correct_answer; 		
			}
		}
		else 	node.innerHTML  = '\u00A0'; 		
		question_cont.appendChild(node);     // Append <div> to question_cont
		

		// add <div class="time_question">
		question_cont = $("#test_wrapper").children(".question_cont")[ii].lastElementChild;
		node = document.createElement("div");
		ID_time_qst = 'ID'+ ii + numberTest*100 +  '_time_question';
		node.setAttribute("id", ID_time_qst);		
		node.setAttribute('class', "time_question");
		node.innerHTML  = '00:00'; 		
		question_cont.appendChild(node);     // Append <div> to question_cont

		// add <div class="time_test">
		question_cont = $("#test_wrapper").children(".question_cont")[ii].lastElementChild;
		node = document.createElement("div");
		ID_time = 'ID'+ ii + numberTest*100 + '_time_test';
		node.setAttribute("id", ID_time);		
		node.setAttribute('class', "time_test");
		node.innerHTML  = '00:00'; 		
    question_cont.appendChild(node);     // Append <div> to question_cont   

		// add <div class="space_question">
		question_cont = $("#test_wrapper").children(".question_cont")[ii]; 
		node = document.createElement("div");		
		node.setAttribute('class', "space_question");
		ID_time = 'ID'+ ii + numberTest*100 + '_space_question';
		node.setAttribute("id", ID_time);	
		question_cont.appendChild(node);     // Append <div> to question_cont


//question_cont = $("#test_wrapper").children(".question_cont")[ii].lastElementChild; 
//  document.getElementById("demo").innerHTML = c[2].text;
//console.log('question_cont  =',question_cont);
	

  }  //---- for(let ii=0; ii < count_questions_test; ii++)
  
//  console.log('numberTest=',numberTest);
  
  countDownDate_qst = new Date().getTime(); // start time for the chosing question

  ID_time = 'ID'+ nQst + numberTest*100 + '_time_question';
  ID_time_qst = 'ID'+ nQst + numberTest*100 + '_time_test';
//console.log('222 count_time_test=',count_time_test);  
  startWatch4(ID_time, numberTest, ID_time_qst, count_time_test); // start time for 0-th question 
 
} //---- function showTest(numberTest) {

/**
 * Returns a random number between min (inclusive) and max (exclusive)
 */
function getRandomArbitrary(min, max) {
    return Math.random() * (max - min) + min;
}

/**
 * Returns a random integer between min (inclusive) and max (inclusive).
 * The value is no lower than min (or the next integer greater than min
 * if min isn't an integer) and no greater than max (or the next integer
 * lower than max if max isn't an integer).
 * Using Math.round() will give you a non-uniform distribution!
 */
function getRandomInt(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

// li_answer - analys of user choose among answers. 
//             li_number - choosing li-number in qst_number questions of number_test test
function li_answer(li_number, qst_number, number_test) {
//console.log('li_number=',li_number, '  qst_number=', qst_number, '  number_test=',number_test);
	let correct_answers;
	let fix_time = '';
	let ID_current;
	let work_start;
	let ID_next;
	let id_input = "id" + String(qst_number*10 + li_number);
	let number_answer = Number(tests[number_test-1][qst_number].C_A);
	let id_correct =  "id" + String(qst_number*10 + (number_answer - 1));
	correct_answers = document.getElementsByClassName("correct_answers")[qst_number];
	if(id_input === id_correct){
		count_correct_answer = count_correct_answer + 1; 	
//console.log('correct_answers=',correct_answers);		
//console.log('id_correct=',id_correct, '  id_input=',id_input, '  count_correct_answer=',count_correct_answer);		
	}
	correct_answers.innerHTML = '/' + count_correct_answer;

	let correct_li = document.getElementById(id_correct);
	let input_li = document.getElementById(id_input);
//console.log('correct_li=',correct_li, '  input_li=',input_li);
	input_li.style.backgroundColor = "red";
	correct_li.style.backgroundColor = "green";

	// show the question time	
	fix_time = count_time_question;  //'0:0';
  clearInterval(X_setInterval);
  
//console.log('fix_time=',fix_time, '   qst_number = ' + qst_number);	
  ID_current = 'ID'+ qst_number + number_test*100 +  '_time_question';
//console.log('ID_current=',ID_current);
  document.getElementById(ID_current).innerHTML = fix_time;
//console.log('1 count_time_test= ', count_time_test);    
  count_time_test = sumMinSec(count_time_test, count_time_question);  // all time for the curent test
//console.log('2 count_time_test= ', count_time_test);  
  ID_current = 'ID'+ qst_number + number_test*100 +  '_time_test';
  //console.log('ID_current=',ID_current);
  document.getElementById(ID_current).innerHTML = count_time_test;

	ID_next = ('ID'+ (qst_number + 1)) + number_test*100 +  '_time_question';
//console.log('ID_next=',ID_next);	
//countDownDate_qst = new Date().getTime();	

  let ID_work = ('ID'+ nQst) + number_test*100 +  '_question_cont';
//console.log('ID_work = ',ID_work);    
  let node = document.getElementById(ID_work); // current question
  node.setAttribute("style", "opacity: .5;");

  // delete onclick for answers list
  let questions_test = tests[number_test-1];
  let question = questions_test[qst_number];
//console.log('question = ',question);
//		node = document.createElement("ul");
//		node.setAttribute('class', "answer_test");		
  let arr_val = Object.values(question);
//console.log('arr_val = ',arr_val);
//console.log('qst_number = ',qst_number);
	for(let i=3; i < arr_val.length; i++){
    ID_work = 'id' + (qst_number*10 + i - 3);
//console.log('ID_work = ',ID_work);    
    node = document.getElementById(ID_work); //  answer ID from answer list
	  node.setAttribute("onclick", "delete");
	}	

  // for WHY: add onclick
  ID_work = ('ID'+ nQst) + number_test*100 +  '_button_test';
//console.log('why ID_work = ',ID_work);  
  node = document.getElementById(ID_work); // WHY element
  ID_work = 'ID'+ nQst + number_test*100 + '_space_question';  
  let ID_cont = ('ID'+ nQst) + number_test*100 +  '_question_cont';
  func = 'why("' + arr_val[0] + '",' + '"' +ID_work + '",' + '"' + ID_cont + '")';
//console.log('func = ',func);   
  node.setAttribute("onclick", func);

  nQst++;
//console.log('nQst=',nQst);
  if (nQst !== count_questions_test) {
    correct_answers = document.getElementsByClassName("correct_answers")[qst_number+1];
    correct_answers.innerHTML = '/' + count_correct_answer;
  }

  if (nQst < count_questions_test) {
    ID_work = ('ID'+ nQst) + number_test*100 +  '_question_cont';

    node = document.getElementById(ID_work); // next question
    node.setAttribute("style", "opacity: 1;"); 
  
    countDownDate_qst = new Date().getTime(); // start time for the chosing question
//console.log('111 number_test = ',number_test);  
    ID_work = 'ID'+ nQst + number_test*100 + '_time_test';
    startWatch4(ID_next, number_test, ID_work, count_time_test); // start time for 0-th question 
  }	else {

  }

} //---- function li_answer(li_number, qst_number, number_test) 


// wordsRendom - it does random list of words
function wordsRendom () {
	
}

// menu_tests - form  tests menu
function menu_tests() {
	for(let i = 0; i < nTests; i++) {
		work = addTestMenu(i+1);	
	}
	
}


// menu_words - form  words menu
function menu_words() {
	let work;
	for(let i=0; i < words_files.length; i++) {
		work = addWordMenu(words_files[i]);
	}	
}

// menu_phrases - form phrases menu
function menu_phrases() {

}

// menu_idioms - form idioms menu
function menu_idioms() {
	let work;
	for(let i=0; i < words_files.length; i++) {
		work = addWordMenu(words_files[i]);
	}
}

/* startWatch - check if seconds is equal to 60 and add a +1 to minutes, and set seconds to 0 */ 
function startWatch2(ID_TIME) { 
let work;
if ( seconds === 60 ) { 
	seconds = 0; 
	minutes = minutes + 1; 
} /* you use the javascript tenary operator to format how the minutes should look and add 0 to minutes if less than 10 */ 
mins = ( minutes < 10 ) ? ( '0' + minutes + ': ' ) : ( minutes + ': ' ); /* check if minutes is equal to 60 and add a +1 to hours set minutes to 0 */ 
if ( minutes === 60 ) { 
	minutes = 0; 
	hours = hours + 1; 
} /* you use the javascript tenary operator to format how the hours should look and add 0 to hours if less than 10 */ 
gethours = ( hours < 10 ) ? ( '0' + hours + ': ' ) : ( hours + ': ' ); 
secs = ( seconds < 10 ) ? ( '0' + seconds ) : ( seconds ); // display the stopwatch 
let x = document.getElementById(ID_TIME); 
x.innerHTML = gethours + mins + secs;
work = gethours + mins + secs; /* call the seconds counter after displaying the stop watch and increment seconds by +1 to keep it counting */ 
clearTime = setTimeout( "startWatch2( )", 1000 ); 
seconds++; /* call the setTimeout( ) to keep the stop watch alive ! */ 
return work;
//clearTime = setTimeout( "startWatch( )", 1000 ); 
} // startWatch2( ) //create a function to start the stop watch 

/* startWatch - check if seconds is equal to 60 and add a +1 to minutes, and set seconds to 0 */ 
function startWatch( ) { 
if ( seconds === 60 ) { 
	seconds = 0; 
	minutes = minutes + 1; 
} /* you use the javascript tenary operator to format how the minutes should look and add 0 to minutes if less than 10 */ 
mins = ( minutes < 10 ) ? ( '0' + minutes + ': ' ) : ( minutes + ': ' ); /* check if minutes is equal to 60 and add a +1 to hours set minutes to 0 */ 
if ( minutes === 60 ) { 
	minutes = 0; 
	hours = hours + 1; 
} /* you use the javascript tenary operator to format how the hours should look and add 0 to hours if less than 10 */ 
gethours = ( hours < 10 ) ? ( '0' + hours + ': ' ) : ( hours + ': ' ); 
secs = ( seconds < 10 ) ? ( '0' + seconds ) : ( seconds ); // display the stopwatch 
//let x = document.getElementById("time_test"); 
//x.innerHTML = gethours + mins + secs; /* call the seconds counter after displaying the stop watch and increment seconds by +1 to keep it counting */ 
seconds++; /* call the setTimeout( ) to keep the stop watch alive ! */ 
clearTime = setTimeout( "startWatch( )", 1000 ); 
} // startWatch( ) //create a function to start the stop watch 
	
/* stopTime - check if seconds, minutes and hours are not equal to 0 */ 	
function stopTime( ) { 
if ( seconds !== 0 || minutes !== 0 || hours !== 0 ) 
{ /* display the full time before reseting the stop watch */ 
	let fulltime = document .getElementById( "fulltime" ); 
	//display the full time fulltime.style.display = "block"; 
	let time = gethours + mins + secs; 
	fulltime.innerHTML = 'Fulltime: ' + time; 
	// reset the stop watch 
	let seconds = 0; 
	let minutes = 0; 
	let hours = 0; 
	let secs = '0' + seconds; 
	let mins = '0' + minutes + ': '; 
	let gethours = '0' + hours + ': '; 
	/* display the stopwatch after it's been stopped */ 
	let x = document.getElementById ("timer"); 
	let stopTime = gethours + mins + secs; 
	x.innerHTML = stopTime; 
	/* display all stop watch control buttons */ 
	let showStart = document.getElementById ('start'); 
	showStart.style.display = "inline-block"; 
	let showStop = document.getElementById ("stop"); 
	showStop.style.display = "inline-block"; 
	/* clear the stop watch using the setTimeout( ) return value 'clearTime' as ID */ 
	clearTimeout( clearTime ); 
} // if () 
} // stopTime() 

// startWatch3 -  timer of common time for the choosing test; insert in ID_TIME element
function startWatch3(ID_TIME) { 
//console.log('ID_TIME=',ID_TIME);  
// Update the count down every 1 second
  var x = setInterval(function() {

  // Get today's date and time
  var now = new Date().getTime();
//console.log('1 now ==== ', now);	
  // Find the distance between now and the count down date
  var distance = now - countDownDate;
//console.log('1 distance ==== ', distance);	
  // Time calculations for days, hours, minutes and seconds
//  var days = Math.floor(distance / (1000 * 60 * 60 * 24));
  var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
//  var seconds = Math.floor((distance % (1000 * 60)) / 1000);

  // Display the result in the element with id="demo"
//  document.getElementById(ID_TIME).innerHTML = days + "d " + hours + "h "
//  + minutes + "m " + seconds + "s ";
  document.getElementById(ID_TIME).innerHTML =  hours + ":" + minutes;

  // If the count down is finished, write some text
  if (distance < 0) {
    clearInterval(x);
    document.getElementById(ID_TIME).innerHTML = "EXPIRED";
  }
  }, 1000);
}

// startWatch4 -  timer of common time for the choosing question; insert in ID_TIME element
//    numberTest - Test number, ID_time_test - ID for test time, time_test - time of all test
function startWatch4(ID_TIME, numberTestWork, ID_time_test, time_test) {  
//console.log('ID_TIME=',ID_TIME, '  numberTestWork=',numberTestWork); 
//console.log('ID_time_test=',ID_time_test, '  time_test=',time_test); 
// Update the count down every 1 second
  let work;
  X_setInterval = setInterval(function() {
//console.log('444  time_test=',time_test); 
  // Get today's date and time
    let now = new Date().getTime();
//console.log('1 now ==== ', now);	
  // Find the distance between now and the count down date
    let distance = now - countDownDate_qst;
//console.log('1 distance ==== ', distance);	
  // Time calculations for days, hours, minutes and seconds
    let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
    let seconds = Math.floor((distance % (1000 * 60)) / 1000);

  // Display the result in the element with id="demo"
//  document.getElementById(ID_TIME).innerHTML = days + "d " + hours + "h "
//  + minutes + "m " + seconds + "s ";
//console.log('1 ID_TIME ==== ', ID_TIME,  '   minutes = ' + minutes, '   seconds = ' + seconds);	
    work = document.getElementById(ID_TIME);
    if (minutes < 10) {
      minutes = '0' + minutes;
    }
    if (seconds < 10) {
      seconds = '0' + seconds;
    }
    count_time_question = minutes + ":" + seconds;
//console.log('minutes = '+minutes, 'seconds = '+seconds);      
//console.log('count_time_question = '+count_time_question);  
    if(work !== null) {
      work.innerHTML = count_time_question; 
    }

  // If the count down is finished, write some text
    if (distance < 0) {
      clearInterval(X_setInterval);
      if(document.getElementById(ID_TIME) !== null) {
        document.getElementById(ID_TIME).innerHTML = "EXPIRED";
      } 
    }

    work = document.getElementById(ID_time_test);
  
    let work2 = sumMinSec(time_test, count_time_question);

    if(work !== null) {
      work.innerHTML = work2;
    }


  }, 1000);
}

// summ minutes and seconds of all test; return -  minutes:seconds
function sumMinSec(count_time_test_work, count_time_quest) {
  let pos=-1, minutes=0, seconds=0;
//console.log('1 count_time_test_work=',count_time_test_work,'  count_time_quest=',count_time_quest);
  pos = count_time_quest.indexOf(':');
  if (pos > 0) {
    minutes = Number(count_time_quest.slice(0, pos));
    seconds = Number(count_time_quest.slice(pos+1));
  } else {
    minutes = 0;
    seconds = 0;
  }
//console.log('2 count_time_test_work=',count_time_test_work,'  count_time_quest=',count_time_quest) 
  pos = count_time_test_work.indexOf(':');
  if (pos > 0) {
    minutes += Number(count_time_test.slice(0, pos));
    seconds += Number(count_time_test.slice(pos+1));
  } 
 
  if (seconds >= 60) {
    minutes += Math.floor(seconds / 60);
    seconds = seconds - (Math.floor(seconds / 60) * 60);
  }

  if (minutes < 10) {
    minutes = '0' + minutes;
  }

  if (seconds < 10) {
    seconds = '0' + seconds;
  }

  return minutes + ':' + seconds;
  
}

// why - show grammer rules (n_reply - key in correct_answers_tests.js) for correct answer 
//      ID - last div in this question = #ID0200_space_question (for first question)
//      ID_cont - ID container
function why(n_reply, ID, ID_cont) {
//console.log('n_reply=',  n_reply);  
//console.log('cAnswers[n_reply]=',  cAnswers[n_reply]);

  let els = document.getElementsByClassName('space_question');
  for (let i = 0; i < els.length; i++) {
    els[i].classList.remove('space_question'); 
  }

  let answer_div = document.getElementById(ID); 
  answer_div.setAttribute("height", "auto");
  answer_div.style.color = "black";
  answer_div.style.backgroundColor = "white";
  answer_div.style.fontWeight = 700;
  answer_div.innerHTML = cAnswers[n_reply];	
  document.getElementById(ID_cont).style.opacity = 1;

 // add <button class="button_answer_close">  WHY
	node = document.createElement("button");		
  node.setAttribute('class', "button_answer_close");
  let kk = ID.indexOf('_'); 
  let ID_work = ID.slice(0, kk) +  '_button_answer_close';
  node.setAttribute("id", ID_work);
  node.setAttribute("value", "Close");
  let func = 'answer_close("' + ID + '")';
  node.setAttribute("onclick", func);
  node.innerHTML = "Close";	
	answer_div.appendChild(node);     // Append <div> to question_cont 


//.why_test
}

// erase content of ID element
function answer_close(ID) {
  document.getElementById(ID).innerHTML = '';
}